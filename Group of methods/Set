In Python, a **Set** is a built-in data type used to store multiple **unique and unordered** elements. 
Sets are useful for removing duplicates and performing mathematical set operations like union, intersection, and difference.

---

## üîπ What is a Set?

- A **set** is defined by curly braces `{}` or the `set()` constructor.
- Sets are **unordered**, **unindexed**, and **do not allow duplicate values**.
- You can **add** or **remove** elements, but you **cannot access them using an index**.

### ‚úÖ Syntax:

```python
# Creating a set
my_set = {1, 2, 3, 4}

# Using set() constructor
new_set = set([1, 2, 3, 2])  # {1, 2, 3}
````

---

## üìå Set Properties

| Property   | Value         |
| ---------- | ------------- |
| Ordered    | ‚ùå No          |
| Duplicates | ‚ùå Not Allowed |
| Mutable    | ‚úÖ Yes         |
| Indexable  | ‚ùå No          |
| Iterable   | ‚úÖ Yes         |

---

## üõ†Ô∏è Common Set Operations

```python
a = {1, 2, 3}
b = {3, 4, 5}

# Union
print(a | b)         # {1, 2, 3, 4, 5}

# Intersection
print(a & b)         # {3}

# Difference
print(a - b)         # {1, 2}

# Symmetric Difference
print(a ^ b)         # {1, 2, 4, 5}
```

---

## üß∞ Set Methods

| Method                      | Description                          | Example                                       |
| --------------------------- | ------------------------------------ | --------------------------------------------- |
| `add(elem)`                 | Add single element                   | `s.add(5)`                                    |
| `update(iterable)`          | Add multiple elements                | `s.update([6, 7])`                            |
| `remove(elem)`              | Remove item; error if not present    | `s.remove(2)`                                 |
| `discard(elem)`             | Remove item; no error if not present | `s.discard(10)`                               |
| `pop()`                     | Removes and returns a random item    | `s.pop()`                                     |
| `clear()`                   | Removes all elements                 | `s.clear()`                                   |
| `copy()`                    | Returns a shallow copy               | `s2 = s.copy()`                               |
| `union(set)`                | Combine sets                         | `s1.union(s2)`                                |
| `intersection(set)`         | Common elements                      | `s1.intersection(s2)`                         |
| `difference(set)`           | Items in first not in second         | `s1.difference(s2)`                           |
| `symmetric_difference(set)` | Items not common in both             | `s1.symmetric_difference(s2)`                 |
| `isdisjoint(set)`           | True if sets have no items in common | `s1.isdisjoint(s2)`                           |
| `issubset(set)`             | True if set is subset                | `s1.issubset(s2)`                             |
| `issuperset(set)`           | True if set is superset              | `s1.issuperset(s2)`                    \`\`\` |

---

## üß™ Example: Using Set Methods

```python
fruits = {"apple", "banana", "cherry"}

fruits.add("orange")
print(fruits)   # {'apple', 'banana', 'cherry', 'orange'}

fruits.discard("banana")
print(fruits)   # {'apple', 'cherry', 'orange'}

a = {1, 2, 3}
b = {3, 4, 5}
print(a & b)    # Intersection ‚Üí {3}
```

---

## ‚ö†Ô∏è Important Notes

* **No Indexing**: You can't access elements using index like `set[0]`.
* **Unordered**: The order of items is not guaranteed to stay the same.
* **Mutable**: You can add or remove elements, but the elements must be **immutable** (e.g., numbers, strings, tuples).

---

## ‚úÖ Frozen Set

A **frozenset** is an immutable version of a set. You cannot modify it after creation.

```python
fs = frozenset([1, 2, 3])
print(fs)  # frozenset({1, 2, 3})
# fs.add(4) ‚Üí ‚ùå Error: can't modify
```

---

## üîÅ Looping Through a Set

```python
colors = {"red", "green", "blue"}

for color in colors:
    print(color)
```

---

## üß† Practice: Remove Duplicates from List

```python
numbers = [1, 2, 2, 3, 4, 4, 5]
unique_numbers = set(numbers)
print(unique_numbers)  # {1, 2, 3, 4, 5}
```

---

## üß≠ Summary Table

| Feature    | Set                | FrozenSet                   |
| ---------- | ------------------ | --------------------------- |
| Ordered    | ‚ùå                  | ‚ùå                           |
| Mutable    | ‚úÖ                  | ‚ùå                           |
| Duplicates | ‚ùå Not allowed      | ‚ùå Not allowed               |
| Indexing   | ‚ùå                  | ‚ùå                           |
| Use Case   | Unique collections | Hashable unique collections |
