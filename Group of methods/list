
In Python, a **list** is an ordered and mutable collection used to store multiple items in a single variable.
Lists can contain **different data types**, including integers, strings, and even other lists.

---

## 🔹 What is a List?

- A **list** is created using **square brackets `[]`** or the **`list()`** constructor.
- It can store **duplicate elements**.
- It supports **indexing**, **slicing**, **modification**, and many built-in methods.

### ✅ Syntax:

```python
# Creating a list
fruits = ["apple", "banana", "cherry"]

# Using list() constructor
colors = list(("red", "green", "blue"))
````

---

## 🧠 List Properties

| Property          | Description          |
| ----------------- | -------------------- |
| Ordered           | ✅ Yes                |
| Mutable           | ✅ Yes                |
| Allows Duplicates | ✅ Yes                |
| Indexing          | ✅ Yes                |
| Nested Structure  | ✅ Lists inside lists |

---

## 📌 Accessing List Elements

```python
fruits = ["apple", "banana", "cherry"]

print(fruits[0])    # Output: apple
print(fruits[-1])   # Output: cherry
```

---

## ✂️ Slicing a List

```python
fruits = ["apple", "banana", "cherry", "date", "fig"]

print(fruits[1:4])     # ['banana', 'cherry', 'date']
print(fruits[:3])      # ['apple', 'banana', 'cherry']
print(fruits[::-1])    # Reverse: ['fig', 'date', 'cherry', 'banana', 'apple']
```

---

## 🛠️ Common List Methods

| Method             | Description                              | Example                              |
| ------------------ | ---------------------------------------- | ------------------------------------ |
| `append(x)`        | Adds element `x` at the end              | `fruits.append("grape")`             |
| `insert(i, x)`     | Inserts `x` at position `i`              | `fruits.insert(1, "kiwi")`           |
| `remove(x)`        | Removes first occurrence of `x`          | `fruits.remove("banana")`            |
| `pop([i])`         | Removes and returns item at index `i`    | `fruits.pop()` or `fruits.pop(2)`    |
| `clear()`          | Removes all items                        | `fruits.clear()`                     |
| `index(x)`         | Returns index of first occurrence of `x` | `fruits.index("cherry")`             |
| `count(x)`         | Returns the count of `x` in the list     | `fruits.count("apple")`              |
| `sort()`           | Sorts the list in ascending order        | `fruits.sort()`                      |
| `reverse()`        | Reverses the order of the list           | `fruits.reverse()`                   |
| `copy()`           | Returns a shallow copy                   | `new_list = fruits.copy()`           |
| `extend(iterable)` | Appends all elements from iterable       | `fruits.extend(["mango", "papaya"])` |

---

## 🔁 Looping Through a List

```python
fruits = ["apple", "banana", "cherry"]

for fruit in fruits:
    print(fruit)
```

---

## 🧮 List Comprehension

Powerful one-liner to create new lists from iterables:

```python
squares = [x**2 for x in range(5)]    # [0, 1, 4, 9, 16]
even = [x for x in range(10) if x % 2 == 0]
```

---

## ➕ List Operators

| Operation     | Example        | Result                 |
| ------------- | -------------- | ---------------------- |
| Concatenation | `a + b`        | Combines two lists     |
| Repetition    | `a * 3`        | Repeats list elements  |
| Membership    | `"apple" in a` | Returns True if exists |

---

## 🧪 Example: Full Use of List Methods

```python
fruits = ["apple", "banana", "cherry"]
fruits.append("date")
fruits.insert(1, "mango")
fruits.remove("banana")
print(fruits)  # ['apple', 'mango', 'cherry', 'date']
fruits.sort()
print(fruits)  # ['apple', 'cherry', 'date', 'mango']
```

---

## 🧊 Nested Lists

You can store lists inside lists (multi-dimensional lists):

```python
matrix = [
    [1, 2, 3],
    [4, 5, 6]
]

print(matrix[0][1])  # 2
```

---

## ⚠️ Note

* You can mix data types:
  `mixed = [1, "two", 3.0, [4, 5]]`
* List elements can be **changed** (mutable), unlike **tuples**.

---

## ✅ Summary Table

| Feature           | List                               |
| ----------------- | ---------------------------------- |
| Ordered           | ✅ Yes                              |
| Mutable           | ✅ Yes                              |
| Allows Duplicates | ✅ Yes                              |
| Indexable         | ✅ Yes                              |
| Common Use        | Collection with flexible structure |
